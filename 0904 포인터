포인터 기본 개념
포인터의 주소 출력하기

#include <stdio.h>

int main(void) {
    int num = 10;
    printf("%p\n", &num);
    return 0;
}
출력 예시: 00AFF9F4

포인터를 이용한 값 저장과 출력


#include <stdio.h>

int main(void) {
    int num;       // 일반 변수 선언
    int *pnum;     // 포인터 선언

    pnum = &num;   // 포인터에 num 주소 대입
    *pnum = 10;    // 포인터를 통해 num에 값 저장

    printf("변수명으로 num 값 출력 : %d\n", num);
    printf("포인터로 num 값 출력 : %d\n", *pnum);

    return 0;
}
출력 예시:

변수명으로 num 값 출력 : 10
포인터로 num 값 출력 : 10
포인터와 상수
상수 포인터를 통한 값 수정 시도

#include <stdio.h>

int main(void) {
    int num = 10;
    const int* p = &num;
    *p = 20;   // 컴파일 에러 발생

    printf("변수 num : %d\n", *p);

    return 0;
}
상수를 이용한 변수 수정

#include <stdio.h>

int main(void) {
    int num = 10;
    const int* p = &num;

    num = 20;  // 성공적으로 변수 값 수정

    printf("변수 num : %d\n", *p);

    return 0;
}
출력 예시: 20

포인터의 참조 및 크기
포인터의 참조와 크기


#include <stdio.h>

int main(void) {
    int num01 = 1234;
    double num02 = 3.14;

    int* ptr_num01 = &num01;
    double* ptr_num02 = &num02;

    printf("포인터의 크기는 %d입니다.\n", sizeof(ptr_num01));
    printf("포인터 ptr_num01이 가리키고 있는 주소값은 %#x입니다.\n", (unsigned int)ptr_num01);
    printf("포인터 ptr_num02가 가리키고 있는 주소값은 %#x입니다.\n", (unsigned int)ptr_num02);
    printf("포인터 ptr_num01이 가리키고 있는 주소에 저장된 값은 %d입니다.\n", *ptr_num01);
    printf("포인터 ptr_num02가 가리키고 있는 주소에 저장된 값은 %f입니다.\n", *ptr_num02);

    return 0;
}
출력 예시:

포인터의 크기는 8입니다.
포인터 ptr_num01이 가리키고 있는 주소값은 0x7c255e4입니다.
포인터 ptr_num02가 가리키고 있는 주소값은 0x7c255e8입니다.
포인터 ptr_num01이 가리키고 있는 주소에 저장된 값은 1234입니다.
포인터 ptr_num02가 가리키고 있는 주소에 저장된 값은 3.140000입니다.
