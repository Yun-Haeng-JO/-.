# 31번

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len, int** queries, size_t queries_rows, size_t queries_cols) 
{
    // 각 쿼리를 처리
    for (int i = 0; i < queries_rows; i++) 
    {
        for (int j = queries[i][0]; j <= queries[i][1]; j++) 
        {
            // j가 k의 배수인 경우 arr[j]에 1을 더함
            if (j % queries[i][2] == 0)
                arr[j]++;
        }
    }
    
    // arr 자체를 그대로 반환
    return arr;
}

```

다른사람 코드

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len, int** queries, size_t queries_rows, size_t queries_cols) {
    for(int i = 0; i < queries_rows; i++) {
        int s = queries[i][0], e = queries[i][1], k = queries[i][2];
        for(; s <= e; s++) {
            if(!(s % k)) arr[s]++;
        }
    }
    return arr;
}

```

- **변수 선언 방식에 약간 차이가 있다.**
    - **첫 번째 코드**: 쿼리 인덱스를 `int j = queries[i][0];`로 설정한 후 `j`를 `e`까지 순회하면서 값을 처리함.
    - **두 번째 코드**: `s` 변수 자체를 수정하여 시작값에서 끝값까지 반복문을 처리함.
    
    두 번째 코드에서는 `s` 변수를 그대로 사용하여 반복문에서 순회하는데, 이는 첫 번째 코드처럼 `j`라는 별도의 변수를 사용하는 것보다 메모리적으로는 약간 더 효율적일 수 있다.
    

# 32번

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int l, int r) 
{
    int* answer = (int*)malloc(sizeof(int) * 1000000);
    int point = 0, check = 0;
    int idx = 0, temp;
    
    for (int i = l; i <= r; i++) 
    {
        temp = i;
        point = 0, check = 0;
        
        while (temp > 0) 
        {
            if (temp % 10 == 0 || temp % 10 == 5)
                check++;
            point++;
            temp /= 10;
        }
        
        if (check == point) 
        {
            answer[idx++] = i;
        }
    }
    
    if (idx == 0)
        answer[idx] = -1;
    
    return answer;
}

```

다른사람 코드

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int IsOk(int num) {
    while(num) {
        int a = num % 10;
        num /= 10;
        if(a == 0 || a == 5) continue;
        return 0;
    }
    return 1;
}
int* solution(int l, int r) {
    int* answer = (int*)malloc(64 * sizeof(int)), cnt = 0;
    for(int num = l; num <= r; num++) {
        if(IsOk(num)) answer[cnt++] = num;
    }
    if(!cnt) answer[0] = -1, cnt = 1;
    answer = (int*)realloc(answer, cnt * sizeof(int));
    return answer;
}

```

**두 번째 코드는** (`IsOk(int num)` 함수)를 사용함.

- `IsOk` 함수는 숫자의 각 자릿수를 확인하고, 만약 "0"이나 "5"가 아닌 다른 숫자가 있으면 바로 `0`을 반환.
- 자릿수에 대한 별도의 카운트 변수를 사용하지 않으며, 조건에 맞지 않으면 즉시 탈출하여 불필요한 반복을 방지한다.
- 조건에 맞으면 1을 반환하여, 해당 숫자가 배열에 추가됨.

# 33번

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int start_num, int end_num) 
{
    int* answer = (int*)malloc((end_num - start_num + 1) * sizeof(int));
    int idx = 0;
        
    for (int i = start_num; i <= end_num; i++) 
        answer[idx++] = i;
    
    return answer;
}
```

다른사람 코드

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int start, int end) {
    int* answer = (int*)malloc((end - start + 1) * sizeof(int));
    int* ptr = answer;
    for(int num = start; num <= end; num++) *ptr++ = num;
    return answer;
}
```

**두 번째 코드는 변수 사용이 다르다.**

- `ptr`이라는 포인터를 사용하여 배열에 값을 저장한다.
- `ptr++ = num;`을 통해 `ptr` 포인터가 가리키는 위치에 값을 저장한 후 포인터를 증가시킴.

# 34번

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int n) 
{
    int* answer = (int*)malloc(sizeof(int) * 1000);
    int idx = 0;
    
    while (1) 
    {
        answer[idx++] = n;
        
        if (n == 1)
            break;
        
        if (n % 2 == 0)
            n /= 2;
        else
            n = 3 * n + 1;
    }
    
    return answer;
}
```

다른사람 코드

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* arr(int n, int idx)
{
    int* ansarr;
    if(n == 1)
    {
        ansarr = (int*)malloc(sizeof(int) * idx + 1);
        ansarr[idx] = n;
        return ansarr;
    }

    int Data = n;
    if(Data % 2 == 0) Data /= 2;
    else Data = Data * 3 + 1;

    ansarr = arr(Data, idx + 1);
    ansarr[idx] = n;
    return ansarr;
}

int* solution(int n) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = arr(n, 0);
    return answer;
}
```

다른 사람의 코드는 재귀 호출을 사용하여 문제를 해결합니다.

- 함수 `arr`는 재귀적으로 `n`의 값을 줄여가며 배열을 반환하고, 마지막에 `n`이 1에 도달하면 메모리를 할당하고 값을 채워나간다.
- **재귀적인 호출을 통해 단계마다 배열의 크기를 점진적으로 확정하고, 최종적으로 배열을 반환함.**

# 35번

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len) 
{
    int* stk = (int*)malloc(sizeof(int) * 100000);
    int i = 0;
    int idx = 0;
    
    while (i < arr_len) 
    {
        if (idx == 0)
            stk[idx++] = arr[i++];
        else 
        {
            if (stk[idx - 1] < arr[i])
                stk[idx++] = arr[i++];
            else 
            {
                stk[idx - 1] = 0;
                idx--;
            }
        }
    }
    
    return stk;
}
```

다른 사람 코드

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// arr_len은 배열 arr의 길이입니다.
int* solution(int arr[], size_t arr_len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* stk = (int*)malloc(arr_len * sizeof(int));
    int i =0 , count=0;
    while(i<arr_len){
        if(stk==NULL){
            stk[count]=arr[i];
            i++;
            count++;
        }
        else if(stk[count-1]<arr[i]){
            stk[count]=arr[i];
            i++;
            count++;
        }
        else if(stk[count-1]>=arr[i]){
            count--;
        }
    }
    return stk;
}
```

스택 초기화 및 조건 처리 부분이 다르다.

- `if (stk == NULL)` 조건이 있습니다. 이 부분은 논리적으로 잘못된 조건이다.
    
    `stk`는 동적 할당된 배열이기 때문에 `NULL`이 될 가능성은 없으므로 이 조건은 항상 거짓이 됨.
    
- `stk[count - 1] >= arr[i]`일 때 `count--`로 처리하지만, 조건이 `else if`로 작성되어 있어 효율성이 떨어질 수 있다.
